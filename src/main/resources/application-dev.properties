spring.application.name=contadorvendas
# Configurações do banco de dados
# local
# spring.datasource.url=jdbc:postgresql://localhost:5432/master
# dev
spring.datasource.url=jdbc:postgresql://postgres:5432/master
# prod
# spring.datasource.url=jdbc:postgresql://postgres-service.default.svc.cluster.local:5432/master
# postgres-service.default.svc.cluster.local: Isso é o que chamamos de DNS interno do Kubernetes.
#  No Kubernetes, os serviços são descobertos usando DNS. Neste caso, "postgres-service" é o nome
#  do serviço que o aplicativo Spring Boot usará para se conectar ao banco de dados PostgreSQL.
#  ".default" é o namespace padrão do Kubernetes onde o serviço reside e ".svc.cluster.local" é o
#  domínio DNS interno do Kubernetes.

spring.datasource.username=postgres
spring.datasource.password=acfa
spring.datasource.driver-class-name=org.postgresql.Driver

management.endpoints.web.exposure.include=health


# Configuração do Flyway
spring.flyway.locations=classpath:db/migration
spring.flyway.enabled=true
spring.flyway.baseline-on-migrate=true
# obs.: o flyway executando no localhost e se tiver postgres instalado
#       ele executa o script na sua totalidade, isso quer dizer: a tabela
#       é criada e as insersões são feitas. No entanto, se o caso de uso
#       for container para rodar a aplicação ele já não têm a 
#       mesma utilidade. 

# Configurações de hibernate
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update

# Configurações do pool de conexões
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5

# Configurações do Hibernate
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Configurações de logging
logging.level.org.springframework.web=DEBUG

